{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/create.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","ref","required","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afc52e4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nfunction getCookie(name) {\n  //for using csrf_tokens\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n\n\n\nexport function backendLookup(method, endpoint, callback, data){\n  //sends requests to api and handle response\n  let jsonData;\n  if(data){\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest() //retrieval of data  from xhr for\n  //purpose of continually modifying loaded web page underlying concept\n  //of AJAX Design.\n  const url = `http://localhost:8000/api${endpoint}`\n  xhr.responseType = \"json\"\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method,url) //Initializes a request.\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n  \n  if(csrftoken){\n  //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\") //In order to make django return \"true\" when queried request.is_ajax()\n  xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n  xhr.setRequestHeader(\"X-CSRFToken\", csrftoken) //to add csrf_token via ajax\n  }\n  \n  xhr.onload = function(){\n    //onload is the function called when an XMLHttpRequest transaction completes successfully.\n    if (xhr.status === 403 ){\n      const detail = xhr.response.detail\n      if(detail === \"Authentication credentials were not provided.\"){\n        if (window.location.href.indexOf(\"login\") === -1) {\n          window.location.href = \"/login?showLoginRequired=true\"\n        }\n      }\n    }\n    callback(xhr.response,xhr.status)\n  }\n  xhr.onerror = function (e){\n    console.log(\"error\",e)\n    //we are basically calling myCallback with parameters response and status\n    callback({\"message\": \"The request was an error!\"}, 400)\n    //A callback function is a function passed into another function as an argument,\n    // which is then invoked inside the outer function to complete some kind of routine or action.\n  }\n  xhr.send(jsonData) //Sends the request\n}\n\n","import React from 'react';\nimport {apiTweetAction} from './lookup';\n\nexport function ActionBtn(props) {\n    const {tweet,action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    \n    const handleActionBackendEvent = (response, status) => {\n      console.log(status, response)\n      if ((status === 200 || status === 201) && didPerformAction){\n        //when some action is performed on tweet, handlePerform action is calld from here.\n        //basically its way of letting parent tweet know, some action is performed on them.\n        didPerformAction(response, status)\n        \n      }\n  \n\n    }\n    const handleClick = (event) => {\n      event.preventDefault()\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n      \n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : `${actionDisplay}` \n    return <button className={className} onClick={handleClick}> {display} </button>\n  }\n  \n","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n    //handles tweet-create request from front end and format it to send it to backend\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content:newTweet})\n  }\n\nexport function apiTweetAction(tweetId, action, callback){\n  //handles tweet-create request from front end and format it to send it to backend\n  const data = {id: tweetId, action: action}\n  console.log(tweetId)\n  backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport function apiTweetList(username, callback){\n  //handles tweet-load request from front end and format it to send it to backend\n  let endpoint = \"/tweets/\"\n  if (username){\n    endpoint = `/tweets/?username=${username}`\n  }\n  backendLookup(\"GET\",endpoint, callback)\n  }\n\nexport  function apiTweetDetail(tweetId, callback){\n  backendLookup(\"GET\",`/tweets/${tweetId}/`, callback)\n}","import React, {useState} from 'react';\nimport {ActionBtn} from './buttons'\n\nexport function ParentTweet(props){\n  //to show parent tweet(when retweeted)\n    const {tweet} = props\n    return tweet.parent ? <div className='row'>\n              <div className='col-11 mx-auto p-3 border rounded'>\n                <p className='mb-0 text-muted small'>Retweet</p>\n                <Tweet hideActions className={' '} tweet={tweet.parent} />\n              </div>\n            </div> : null\n  \n  }\n  \n  export function Tweet(props){\n    const {tweet, didRetweet, hideActions} = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    //to store the content of tweet & also modify the tweet when liked/unliked\n    //console.log(actionTweet)\n    //console.log(tweet)\n    const className = props.className ? props.className : 'col-10 mx-auto cold-md-6'\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/) //getting tweetId if it is detail page\n    const urlTweetId = match ? match.groups.tweetid : -1 \n    //if its detail view then match will return true, so url will then extract property\n    //-1 since we dont have any tweet with that id\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n    \n\n    const handleLink  = (event) => {\n      event.preventDefault()\n      window.location.href = `/${tweet.id}` //redirecting to tweet page\n    }\n  \n    const handlePerformAction = (newActionTweet, status) => {\n      //to perform some action when orignal tweet came to know its been retweeted, liked or unliked.\n      if (status === 200){\n        console.log(newActionTweet)\n        setActionTweet(newActionTweet)\n        //we change the state of tweet, which is been liked or unliked\n      } else if (status === 201){\n        if (didRetweet){\n          didRetweet(newActionTweet)\n        }\n        //let the tweet list know\n      }\n      \n    }\n  \n    return  <div className={className}>\n              <div>\n                <p>{tweet.id} - {tweet.content}</p>\n                <ParentTweet tweet={tweet} />\n                </div>\n              <div className='btn btn-group'>\n                {(actionTweet && hideActions !== true) && <React.Fragment>\n                  <ActionBtn  tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}} />\n                  <ActionBtn  tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display:\"UnLike\"}} />\n                  <ActionBtn  tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display:\"Retweet\"}} />\n                </React.Fragment>\n                }\n                {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n              </div>\n            </div>\n  }\n  ","import React from 'react';\nimport {apiTweetCreate} from './lookup';\n\nexport function TweetCreate(props){\n  const textAreaRef = React.createRef()\n  const {didTweet} = props\n\n  const handleBackendUpdate = (response, status) =>{\n    if (status === 201){\n      didTweet(response) //call back to TweetsComponent\n    }else{\n      console.log(response)\n      alert(\"An error occured please try again\")\n    }\n  }\n  \n  const handleSubmit = (event) => {\n    //handles submit(on tweeting)\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    //backend api request\n    apiTweetCreate(newVal, handleBackendUpdate)//second arg is 'callback' when tweet created\n    textAreaRef.current.value = ''\n  }\n\n  return <div className={props.className}>\n            <form onSubmit={handleSubmit}>\n              <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n              </textarea>\n              <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n          </div>\n\n}\n\n\n\n\n\n\n\n\n","import React, {useEffect, useState} from 'react';\nimport {apiTweetList} from './lookup';\nimport {Tweet} from './detail'\n\nexport function TweetsList(props){\n  //it will be called at start to load tweets\n  //and then every time a new tweet is submitted\n\n  const [tweetsInit, setTweetsInit] = useState([])//to make account of tweets when page refreshed\n  const [tweets, setTweets] = useState([])//the final set of tweets to display \n  const [tweetsDidSet, setTweetsDidSet] = useState(false)//to check if this fun is called initially\n  // or when new tweet submitted\n\n\n  useEffect(() =>{\n    //to append new tweets\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length) {\n      setTweets(final)\n    }\n\n  }, [props.newTweets, tweets, tweetsInit])\n\n\n  useEffect(() =>\n  {\n    //for getting tweet list initially when page is loaded.\n    if (tweetsDidSet === false){\n    const handleTweetListLookup = (response, status) => {\n      //console.log(response,status)\n      if(status === 200){\n        setTweetsInit(response)\n        setTweetsDidSet(true)//to know this was called when loading the page\n        //on setting true when new tweets added, this callback wont run!\n\n      }\n      else{\n        alert(\"There was an error\")\n      }\n      \n    }\n\n    apiTweetList(props.username,handleTweetListLookup)\n      \n    }\n  },[tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]) //[] it is dependency array, to denote what this useeffect is dependent on.\n      \n\n  const handleDidRetweet = (newTweet) => {\n    //update tweetlist when retweet action is performed \n    const updateTweetsInit  = [...tweetsInit]\n    updateTweetsInit.unshift(newTweet)\n    setTweetsInit(updateTweetsInit)\n    const updateFinalTweets  = [...tweets]\n    updateFinalTweets.unshift(tweets)\n    setTweets(updateFinalTweets)\n    //console.log(tweets)\n\n  }\n\n\n  return tweets.map((item,index)=>{\n    return <Tweet\n      didRetweet = {handleDidRetweet}  \n      tweet={item} className='my-5 py-5 border bg-white text-dark'\n      key={`${index}-item.id`} />\n  }\n  )\n  //Keys help React identify which items have changed, are added, or are removed.\n  // Keys should be given to the elements inside the array to give the elements a stable identity\n    \n    }\n\n\n//-----------Use Effect----------\n//you tell React that your component needs to do something after render.\n// React will remember the function you passed\n//and call it later after performing the DOM updates.\n//Effects are declared inside the component so they have access to its props and state.\n// By default, React runs the effects after every render — including the first render\n//Every time we re-render, we schedule a different effect, replacing the previous one. \n//In a way, this makes the effects behave more like a part of the render result\n\n//----------Map--------------\n//The Map object holds key-value pairs and remembers the original insertion order of the keys.\n//index in map function denotes position of item within array","import React, {useEffect, useState} from 'react';\nimport {apiTweetDetail} from './lookup'\nimport {Tweet} from './detail'\nimport {TweetCreate} from './create'\nimport {TweetsList} from './list'\n\n\nexport function TweetsComponent(props){\n  //it is main custom tag which is getting rendered into django\n  const [newTweets, setNewTweets] = useState([])\n\n  const canTweet = props.canTweet === \"false\" ? false : true\n\n  const handleNewTweet = (newTweet) =>{\n    //called when new tweet created\n    //takes data from callback from TweetCreate\n    //sends new Tweet data to TweetsList\n    let tempNewTweets = [...newTweets]\n      tempNewTweets.unshift(newTweet)//can hold multiple new tweets\n      setNewTweets(tempNewTweets) \n    }\n\n  return <div className={props.className}>\n          {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12mb-3' />}\n          <TweetsList newTweets={newTweets} {...props} />\n    </div>\n}\n\nexport function TweetDetailComponent(props){\n  const {tweetId} = props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n\n  const handleBackendLookup = (response, status) => {\n    if (status === 200){\n      setTweet(response)\n    } else {\n      alert(\"There was an error finding your tweet.\")\n    }\n  }\n\n  useEffect(() =>{\n    if (didLookup === false){\n      apiTweetDetail(tweetId, handleBackendLookup)\n      setDidLookup(true)\n    }\n  },[tweetId, didLookup, setDidLookup])\n\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}\n\n\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<App />, appEl);\n}\n\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl){\n  ReactDOM.render(\n    e(TweetsComponent, tweetsEl.dataset),\n    tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container => {\n  ReactDOM.render\n  (e(TweetDetailComponent, container.dataset),\n  container);\n})\n//inside e first argument is which component to render\n//second is what data to put       \n//second arg inside render is where to put \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}