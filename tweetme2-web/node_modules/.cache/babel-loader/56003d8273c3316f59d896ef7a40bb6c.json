{"ast":null,"code":"var _jsxFileName = \"/home/woltab/my_works/tweetme2/tweetme2-web/src/tweets/components.js\";\nimport React from 'react';\nexport function loadTweets(callback) {\n  const xhr = new XMLHttpRequest(); //retrieval of data  from xhr for\n  //purpose of continually modifying loaded web page underlying concept\n  //of AJAX Design.\n\n  const method = 'GET';\n  const url = \"http://localhost:8000/api/tweets/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url); //open up this method with this url\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e); //we are basically calling myCallback with parameters response and status\n\n    callback({\n      \"message\": \"The request was an error!\"\n    }, 400); //A callback function is a function passed into another function as an argument,\n    // which is then invoked inside the outer function to complete some kind of routine or action.\n  };\n\n  xhr.send(); //trigger the request after i send it up\n}\nexport function TweetsList(props) {\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    //myCallback is a function which takes response and status as parameter\n    const myCallback = (response, status) => {\n      //console.log(response,status)\n      if (status === 200) {\n        setTweets(response);\n      } else {\n        alert(\"There was an error\");\n      }\n    }; // do my lookup\n    //we are passing a function as an argument to another function\n    //It will be async callback since first request to load tweets willbe made\n    //and depending on response myCallback will be called \n\n\n    loadTweets(myCallback); //The Map object holds key-value pairs and remembers the original insertion order of the keys.\n  }, []);\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Tweet, {\n      tweet: item,\n      className: \"my-5 py-5 border bg-white text-dark\",\n      key: `${index}-item.id`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 14\n      }\n    });\n  });\n}\nexport function ActionBtn(props) {\n  const {\n    tweet,\n    action\n  } = props;\n  const className = props.className ? props.className : 'btn btn-primary btn-sm';\n  return action.type === 'like' ? /*#__PURE__*/React.createElement(\"button\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 37\n    }\n  }, tweet.likes, \" Likes \") : null;\n}\nexport function Tweet(props) {\n  //props are argument passed to react components\n  //props are an object, do console.log to find it out\n  //console.log(props)\n  const {\n    tweet\n  } = props;\n  const className = props.className ? props.className : 'col-10mx-auto cold-md-6';\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, tweet.id, \"-\", tweet.content), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn btn-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ActionBtn, {\n    tweet: tweet,\n    action: {\n      type: \"like\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ActionBtn, {\n    tweet: tweet,\n    action: {\n      type: \"unlike\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/woltab/my_works/tweetme2/tweetme2-web/src/tweets/components.js"],"names":["React","loadTweets","callback","xhr","XMLHttpRequest","method","url","responseType","open","onload","response","status","onerror","e","console","log","send","TweetsList","props","tweets","setTweets","useState","useEffect","myCallback","alert","map","item","index","ActionBtn","tweet","action","className","type","likes","Tweet","id","content"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nexport function loadTweets(callback){\n    const xhr = new XMLHttpRequest() //retrieval of data  from xhr for\n    //purpose of continually modifying loaded web page underlying concept\n    //of AJAX Design.\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method,url) //open up this method with this url\n    xhr.onload = function(){\n      callback(xhr.response,xhr.status)\n    }\n    xhr.onerror = function (e){\n      console.log(e)\n      //we are basically calling myCallback with parameters response and status\n      callback({\"message\": \"The request was an error!\"}, 400)\n      //A callback function is a function passed into another function as an argument,\n      // which is then invoked inside the outer function to complete some kind of routine or action.\n    }\n    xhr.send() //trigger the request after i send it up\n  \n  }\n  \nexport function TweetsList(props){\n    const [tweets, setTweets] = useState([])\n    \n    useEffect(() =>\n    {\n      //myCallback is a function which takes response and status as parameter\n      const myCallback = (response, status) => {\n        //console.log(response,status)\n        if(status === 200){\n          setTweets(response)\n  \n        }\n        else{\n          alert(\"There was an error\")\n        }\n        \n      }\n      // do my lookup\n      //we are passing a function as an argument to another function\n      //It will be async callback since first request to load tweets willbe made\n      //and depending on response myCallback will be called \n      loadTweets(myCallback);\n      //The Map object holds key-value pairs and remembers the original insertion order of the keys.\n    }, [])\n    return tweets.map((item,index)=>{\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-item.id`} />\n    }\n    )\n  \n  }\n\nexport function ActionBtn(props) {\n    const {tweet,action} = props\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    return action.type === 'like' ? <button className={className}>{tweet.likes} Likes </button> : null\n  }\n  \n  \nexport function Tweet(props){\n    //props are argument passed to react components\n    //props are an object, do console.log to find it out\n    //console.log(props)\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10mx-auto cold-md-6'\n    return <div className={className}>\n      <p>{tweet.id}-{tweet.content}</p>\n      <div className='btn btn-group'>\n        <ActionBtn  tweet={tweet} action={{type:\"like\"}} />\n        <ActionBtn  tweet={tweet} action={{type:\"unlike\"}} />\n      </div>\n  \n    </div>\n  }"]},"metadata":{},"sourceType":"module"}