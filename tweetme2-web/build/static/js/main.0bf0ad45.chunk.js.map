{"version":3,"sources":["logo.svg","image.webp","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","console","log","length","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","display","setLikes","userLike","setUserLike","actionDisplay","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0bf0ad45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/image.b5a4f70c.webp\";","import React, {useEffect, useState} from 'react';\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponent(props){\n  const textAreaRef = React.createRef()\n  const [newTweets, setNewTweets] = useState([])\n  \n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    \n    let tempNewTweets = [...newTweets] //taking any number of args\n    // The rest parameter operator is used in function parameter lists \n    //with the format: ...variable and it will include within that variable \n    //the entire list of uncaptured arguments that the function was called with\n    console.log(newTweets.length)\n    tempNewTweets.unshift({\n      content: newVal,\n      likes: 0,\n      id:12313\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = ''\n  }\n\n  return <div className={props.className}>\n          <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n              <textarea ref={textAreaRef}required={true} className='form-control' name='tweet'>\n\n              </textarea>\n              <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n          </div>\n          <TweetsList newTweets={newTweets} />\n    </div>\n}\n\n\n\nexport function TweetsList(props){\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    \n    useEffect(() =>{\n      //you tell React that your component needs to do something after render.\n      // React will remember the function you passed\n      //and call it later after performing the DOM updates.\n      //Effects are declared inside the component so they have access to its props and state.\n      // By default, React runs the effects after every render — including the first render\n      //Every time we re-render, we schedule a different effect, replacing the previous one. \n      //In a way, this makes the effects behave more like a part of the render result\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() =>\n    {\n      //myCallback is a function which takes response and status as parameter\n      const myCallback = (response, status) => {\n        //console.log(response,status)\n        if(status === 200){\n          setTweetsInit(response)\n  \n        }\n        else{\n          alert(\"There was an error\")\n        }\n        \n      }\n      // do my lookup\n      //we are passing a function as an argument to another function\n      //It will be async callback since first request to load tweets willbe made\n      //and depending on response myCallback will be called \n      loadTweets(myCallback);\n      //The Map object holds key-value pairs and remembers the original insertion order of the keys.\n    }, []) //[] it is dependency array, to denote what this useeffect is dependent on.\n    //index in map function denotes position of item within array\n    return tweets.map((item,index)=>{\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-item.id`} />\n    }\n    )\n    //Keys help React identify which items have changed, are added, or are removed.\n    // Keys should be given to the elements inside the array to give the elements a stable identity\n  \n  }\n\nexport function Tweet(props){\n  //props are argument passed to react components\n  //props are an object, do console.log to find it out\n  //console.log(props)\n  const {tweet} = props\n  const className = props.className ? props.className : 'col-10mx-auto cold-md-6'\n\n  return <div className={className}>\n          <p>{tweet.id} - {tweet.content}</p>\n          <div className='btn btn-group'>\n            <ActionBtn  tweet={tweet} action={{type:\"like\", display:\"Likes\"}} />\n            <ActionBtn  tweet={tweet} action={{type:\"unlike\", display:\"UnLike\"}} />\n            <ActionBtn  tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}} />\n          </div>\n        </div>\n}\n\nexport function ActionBtn(props) {\n    const {tweet,action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    //argument passed to useState sets initial state of first parameter i.e. likes\n    //The setState function is used to update the state. \n    //It accepts a new state value and enqueues a re-render of the component.\n    //Normally, variables “disappear” when the function exits but state variables are preserved by React.\n    //likes is variable(initialized with tweet.likes or 0) and setLikes is function\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    \n    const handleClick = (event) => {\n      event.preventDefault()\n      if (action.type === 'like'){\n        if(userLike === true) {\n          setLikes(likes - 1)\n          setUserLike(false)\n        }else{\n        setLikes(likes+1)\n        setUserLike(true)\n      }}\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : `${actionDisplay}` \n    return <button className={className} onClick={handleClick}> {display} </button>\n  }\n  \n","\nexport function loadTweets(callback){\n    const xhr = new XMLHttpRequest() //retrieval of data  from xhr for\n    //purpose of continually modifying loaded web page underlying concept\n    //of AJAX Design.\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method,url) //open up this method with this url\n    xhr.onload = function(){\n      callback(xhr.response,xhr.status)\n    }\n    xhr.onerror = function (e){\n      console.log(e)\n      //we are basically calling myCallback with parameters response and status\n      callback({\"message\": \"The request was an error!\"}, 400)\n      //A callback function is a function passed into another function as an argument,\n      // which is then invoked inside the outer function to complete some kind of routine or action.\n    }\n    xhr.send() //trigger the request after i send it up\n  \n  }","import React from 'react';\nimport logo from './logo.svg';\nimport logo2 from './image.webp'\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl){\n  ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}