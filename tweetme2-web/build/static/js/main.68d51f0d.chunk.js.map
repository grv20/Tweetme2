{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/create.js","tweets/list.js","tweets/feed.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","console","log","send","apiTweetFeed","nextUrl","undefined","replace","apiTweetList","username","ActionBtn","props","tweet","action","didPerformAction","likes","iconClass","className","type","actionDisplay","display","handleActionBackendEvent","onClick","event","preventDefault","tweetId","id","apiTweetAction","class","aria-hidden","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","parent","Tweet","isRetweet","retweeter","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","ref","required","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","FeedList","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","tweetFeedEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68d51f0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nfunction getCookie(name) {\n  //for using csrf_tokens\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n\n\n\nexport function backendLookup(method, endpoint, callback, data){\n  //sends requests to api and handle response\n  let jsonData;\n  if(data){\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest() //retrieval of data  from xhr for\n  //purpose of continually modifying loaded web page underlying concept\n  //of AJAX Design.\n  const url = `http://localhost:8000/api${endpoint}`\n  xhr.responseType = \"json\"\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method,url) //Initializes a request.\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n  \n  if(csrftoken){\n  //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\") //In order to make django return \"true\" when queried request.is_ajax()\n  xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n  xhr.setRequestHeader(\"X-CSRFToken\", csrftoken) //to add csrf_token via ajax\n  }\n  \n  xhr.onload = function(){\n    //onload is the function called when an XMLHttpRequest transaction completes successfully.\n    if (xhr.status === 403 ){\n      const detail = xhr.response.detail\n      if(detail === \"Authentication credentials were not provided.\"){\n        if (window.location.href.indexOf(\"login\") === -1) {\n          window.location.href = \"/login?showLoginRequired=true\"\n        }\n      }\n    }\n    callback(xhr.response,xhr.status)\n  }\n  xhr.onerror = function (e){\n    console.log(\"error\",e)\n    //we are basically calling myCallback with parameters response and status\n    callback({\"message\": \"The request was an error!\"}, 400)\n    //A callback function is a function passed into another function as an argument,\n    // which is then invoked inside the outer function to complete some kind of routine or action.\n  }\n  xhr.send(jsonData) //Sends the request\n}\n\n","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n    //handles tweet-create request from front end and format it to send it to backend\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content:newTweet})\n  }\n\nexport function apiTweetAction(tweetId, action, callback){\n  //handles tweet-create request from front end and format it to send it to backend\n  const data = {id: tweetId, action: action}\n  console.log(tweetId)\n  backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport function apiTweetFeed(callback, nextUrl){\n  //handles tweet-load request from front end and format it to send it to backend\n  let endpoint = \"/tweets/feed/\"\n  if(nextUrl !== null && nextUrl !== undefined){\n    endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n  }\n  backendLookup(\"GET\",endpoint, callback)\n  }\n\nexport function apiTweetList(username, callback, nextUrl){\n  //handles tweet-load request from front end and format it to send it to backend\n  let endpoint = \"/tweets/\"\n  if (username){\n    endpoint = `/tweets/?username=${username}`\n  }\n  if(nextUrl !== null && nextUrl !== undefined){\n    endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n  }\n  backendLookup(\"GET\",endpoint, callback)\n  }\n\nexport  function apiTweetDetail(tweetId, callback){\n  backendLookup(\"GET\",`/tweets/${tweetId}/`, callback)\n}","import React from 'react';\nimport {apiTweetAction} from './lookup';\n\nexport function ActionBtn(props) {\n    const {tweet,action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes : 0\n    let iconClass = 'fa fa-retweet'\n    let className = props.className ? props.className : 'btn btn-outline-primary btn-sm'\n    if (action.type === \"like\") {\n      className = 'btn btn-outline-success'\n      iconClass = 'fa fa-thumbs-up'\n  }\n    else if(action.type === \"unlike\") {\n      className = 'btn btn-outline-danger'\n      iconClass = 'fa fa-thumbs-down'\n    }\n    const actionDisplay = action.display ? action.display : 'Action'\n    \n    const handleActionBackendEvent = (response, status) => {\n      console.log(status, response)\n      if ((status === 200 || status === 201) && didPerformAction){\n        //when some action is performed on tweet, handlePerform action is calld from here.\n        //basically its way of letting parent tweet know, some action is performed on them.\n        didPerformAction(response, status)\n        \n      }\n  \n\n    }\n    const handleClick = (event) => {\n      event.preventDefault()\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n      \n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : `${actionDisplay}` \n    return <button className={className} onClick={handleClick}>{display} <i class={iconClass} aria-hidden=\"true\"></i> </button>\n  }\n  \n","import React from 'react';\n\n\n\nexport function UserLink (props) {\n  const {username} = props\n  const handleUserLink = (event) => {\n    window.location.href = `/profile/${username}`\n  }\n  return <span className=\"pointer text-info\" onClick={handleUserLink}>\n    {props.children}\n  </span>\n}\n\n\nexport function UserDisplay(props){\n  const {user, includeFullName} = props\n  const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null\n\n  return <React.Fragment>\n    {nameDisplay}\n    <UserLink username={user.username}>@{user.username}</UserLink>\n  </React.Fragment>\n}\n\nexport function UserPicture(props){\n  const {user} = props\n  return  <UserLink username={user.username}><span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\n          {user.username[0]}\n        </span></UserLink>\n}","import React, {useState} from 'react';\nimport {ActionBtn} from './buttons'\nimport {UserPicture, UserDisplay} from '../profiles'\n\n\nexport function ParentTweet(props){\n  //to show parent tweet(when retweeted)\n    const {tweet} = props\n    return tweet.parent ? <Tweet isRetweet retweeter={props.retweeter}  hideActions className={' '} tweet={tweet.parent} /> : null\n  \n  }\n  \n  export function Tweet(props){\n    const {tweet, didRetweet, hideActions, isRetweet, retweeter} = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    //to store the content of tweet & also modify the tweet when liked/unliked\n    //console.log(actionTweet)\n    //console.log(tweet)\n    let className = props.className ? props.className : 'col-10 mx-auto cold-md-6'\n    className = isRetweet === true ? `${className} p-2 border rounded ` : className\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/) //getting tweetId if it is detail page\n    const urlTweetId = match ? match.groups.tweetid : -1 \n    //if its detail view then match will return true, so url will then extract property\n    //-1 since we dont have any tweet with that id\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n    \n\n    const handleLink  = (event) => {\n      event.preventDefault()\n      window.location.href = `/${tweet.id}` //redirecting to tweet page\n    }\n  \n    const handlePerformAction = (newActionTweet, status) => {\n      //to perform some action when orignal tweet came to know its been retweeted, liked or unliked.\n      if (status === 200){\n        console.log(newActionTweet)\n        setActionTweet(newActionTweet)\n        //we change the state of tweet, which is been liked or unliked\n      } else if (status === 201){\n        if (didRetweet){\n          didRetweet(newActionTweet)\n        }\n        //let the tweet list know\n      }\n      \n    }\n  \n    return  <div className={className}>\n              {isRetweet === true && <div className='mb-2'>\n                <span className='small text-muted'> <i class='fa fa-retweet' aria-hidden='true' /> Retweet via <UserDisplay user={retweeter} /></span>\n                </div>}\n              <div className='d-flex'>\n              \n                <div className=''>\n                  <UserPicture user={tweet.user} />\n                </div>\n                  <div className='col-11'>\n                    <div>\n                    \n                  <p>\n                    <UserDisplay includeFullName user={tweet.user} />\n                  </p>\n\n                  <p>{tweet.content}</p>\n                  \n                  <ParentTweet tweet={tweet} retweeter={tweet.user} />\n                  </div>\n\n                  <div className='btn btn-group px-0'>\n                    {(actionTweet && hideActions !== true) && <React.Fragment>\n                      <ActionBtn  tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}} />\n                      <ActionBtn  tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display:\"UnLike\"}} />\n                      <ActionBtn  tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display:\"Retweet\"}} />\n                    </React.Fragment>\n                    }\n                    {isDetail === true ? null : <button className='btn btn-outline-dark btn-sm' onClick={handleLink}>View <i class=\"fa fa-eye\" aria-hidden=\"true\"></i></button>}\n                  </div>\n                </div>\n              </div>\n            </div>\n  }\n  ","import React from 'react';\nimport {apiTweetCreate} from './lookup';\n\nexport function TweetCreate(props){\n  const textAreaRef = React.createRef()\n  const {didTweet} = props\n\n  const handleBackendUpdate = (response, status) =>{\n    if (status === 201){\n      didTweet(response) //call back to TweetsComponent\n    }else{\n      console.log(response)\n      alert(\"An error occured please try again\")\n    }\n  }\n  \n  const handleSubmit = (event) => {\n    //handles submit(on tweeting)\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    //backend api request\n    apiTweetCreate(newVal, handleBackendUpdate)//second arg is 'callback' when tweet created\n    textAreaRef.current.value = ''\n  }\n\n  return <div className={props.className}>\n            <form onSubmit={handleSubmit}>\n              <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n              </textarea>\n              <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n          </div>\n\n}\n\n\n\n\n\n\n\n\n","import React, {useEffect, useState} from 'react';\nimport {apiTweetList} from './lookup';\nimport {Tweet} from './detail'\n\nexport function TweetsList(props){\n  //it will be called at start to load tweets\n  //and then every time a new tweet is submitted\n\n  const [tweetsInit, setTweetsInit] = useState([])//to make account of tweets when page refreshed\n  const [tweets, setTweets] = useState([])//the final set of tweets to display \n  const [nextUrl, setNextUrl] = useState(null)\n  const [tweetsDidSet, setTweetsDidSet] = useState(false)//to check if this fun is called initially\n  // or when new tweet submitted\n\n\n  useEffect(() =>{\n    //to append new tweets\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length) {\n      setTweets(final)\n    }\n\n  }, [props.newTweets, tweets, tweetsInit])\n\n\n  useEffect(() =>\n  {\n    //for getting tweet list initially when page is loaded.\n    if (tweetsDidSet === false){\n    const handleTweetListLookup = (response, status) => {\n      //console.log(response,status)\n      if(status === 200){\n        setNextUrl(response.next)\n        setTweetsInit(response.results)\n        setTweetsDidSet(true)//to know this was called when loading the page\n        //on setting true when new tweets added, this callback wont run!\n\n      }\n      else{\n        alert(\"There was an error\")\n      }\n      \n    }\n\n    apiTweetList(props.username,handleTweetListLookup)\n      \n    }\n  },[tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]) //[] it is dependency array, to denote what this useeffect is dependent on.\n      \n\n  const handleDidRetweet = (newTweet) => {\n    //update tweetlist when retweet action is performed \n    const updateTweetsInit  = [...tweetsInit]\n    updateTweetsInit.unshift(newTweet)\n    setTweetsInit(updateTweetsInit)\n    const updateFinalTweets  = [...tweets]\n    updateFinalTweets.unshift(tweets)\n    setTweets(updateFinalTweets)\n    //console.log(tweets)\n\n  }\n\n  const handleLoadNext = (event) => {\n    event.preventDefault()\n    if (nextUrl != null){\n      const handleLoadNextResponse = (response, status) =>{\n        if(status === 200){\n          setNextUrl(response.next)\n          const newTweets = [...tweets].concat(response.results)\n          setTweetsInit(newTweets)\n          setTweets(newTweets)\n        }\n        else{\n          alert(\"There was an error\")\n        }\n      }\n      apiTweetList(props.username, handleLoadNextResponse, nextUrl)\n    }\n  }\n\n  return <React.Fragment>{tweets.map((item,index)=>{\n    return <Tweet\n      didRetweet = {handleDidRetweet}  \n      tweet={item} className='my-5 py-5 border bg-white text-dark'\n      key={`${index}-item.id`} />\n  }\n  )}\n  {nextUrl !== null  && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n  </React.Fragment>\n  //Keys help React identify which items have changed, are added, or are removed.\n  // Keys should be given to the elements inside the array to give the elements a stable identity\n    \n    }\n\n\n//-----------Use Effect----------\n//you tell React that your component needs to do something after render.\n// React will remember the function you passed\n//and call it later after performing the DOM updates.\n//Effects are declared inside the component so they have access to its props and state.\n// By default, React runs the effects after every render — including the first render\n//Every time we re-render, we schedule a different effect, replacing the previous one. \n//In a way, this makes the effects behave more like a part of the render result\n\n//----------Map--------------\n//The Map object holds key-value pairs and remembers the original insertion order of the keys.\n//index in map function denotes position of item within array","import React, {useEffect, useState} from 'react';\nimport {apiTweetFeed} from './lookup';\nimport {Tweet} from './detail'\n\nexport function FeedList(props){\n  //it will be called at start to load tweets\n  //and then every time a new tweet is submitted\n\n  const [tweetsInit, setTweetsInit] = useState([])//to make account of tweets when page refreshed\n  const [tweets, setTweets] = useState([])//the final set of tweets to display \n  const [nextUrl, setNextUrl] = useState(null)\n  const [tweetsDidSet, setTweetsDidSet] = useState(false)//to check if this fun is called initially\n  // or when new tweet submitted\n\n\n  useEffect(() =>{\n    //to append new tweets\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length) {\n      setTweets(final)\n    }\n\n  }, [props.newTweets, tweets, tweetsInit])\n\n\n  useEffect(() =>\n  {\n    //for getting tweet list initially when page is loaded.\n    if (tweetsDidSet === false){\n    const handleTweetListLookup = (response, status) => {\n      //console.log(response,status)\n      if(status === 200){\n        setNextUrl(response.next)\n        setTweetsInit(response.results)\n        setTweetsDidSet(true)//to know this was called when loading the page\n        //on setting true when new tweets added, this callback wont run!\n\n      }\n      \n      \n    }\n\n    apiTweetFeed(handleTweetListLookup)\n      \n    }\n  },[tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]) //[] it is dependency array, to denote what this useeffect is dependent on.\n      \n\n  const handleDidRetweet = (newTweet) => {\n    //update tweetlist when retweet action is performed \n    const updateTweetsInit  = [...tweetsInit]\n    updateTweetsInit.unshift(newTweet)\n    setTweetsInit(updateTweetsInit)\n    const updateFinalTweets  = [...tweets]\n    updateFinalTweets.unshift(tweets)\n    setTweets(updateFinalTweets)\n    //console.log(tweets)\n\n  }\n\n  const handleLoadNext = (event) => {\n    event.preventDefault()\n    if (nextUrl != null){\n      const handleLoadNextResponse = (response, status) =>{\n        if(status === 200){\n          setNextUrl(response.next)\n          const newTweets = [...tweets].concat(response.results)\n          setTweetsInit(newTweets)\n          setTweets(newTweets)\n        }\n        \n      }\n      apiTweetFeed(handleLoadNextResponse, nextUrl)\n    }\n  }\n\n  return <React.Fragment>{tweets.map((item,index)=>{\n    return <Tweet\n      didRetweet = {handleDidRetweet}  \n      tweet={item} className='my-5 py-5 border bg-white text-dark'\n      key={`${index}-item.id`} />\n  }\n  )}\n  {nextUrl !== null  && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n  </React.Fragment>\n  //Keys help React identify which items have changed, are added, or are removed.\n  // Keys should be given to the elements inside the array to give the elements a stable identity\n    \n    }\n\n\n//-----------Use Effect----------\n//you tell React that your component needs to do something after render.\n// React will remember the function you passed\n//and call it later after performing the DOM updates.\n//Effects are declared inside the component so they have access to its props and state.\n// By default, React runs the effects after every render — including the first render\n//Every time we re-render, we schedule a different effect, replacing the previous one. \n//In a way, this makes the effects behave more like a part of the render result\n\n//----------Map--------------\n//The Map object holds key-value pairs and remembers the original insertion order of the keys.\n//index in map function denotes position of item within array","import React, {useEffect, useState} from 'react';\nimport {apiTweetDetail} from './lookup'\nimport {Tweet} from './detail'\nimport {TweetCreate} from './create'\nimport {TweetsList} from './list'\nimport {FeedList} from './feed'\n\nexport function FeedComponent(props){\n  //it is main custom tag which is getting rendered into django\n  const [newTweets, setNewTweets] = useState([])\n\n  const canTweet = props.canTweet === \"false\" ? false : true\n\n  const handleNewTweet = (newTweet) =>{\n    //called when new tweet created\n    //takes data from callback from TweetCreate\n    //sends new Tweet data to TweetsList\n    let tempNewTweets = [...newTweets]\n      tempNewTweets.unshift(newTweet)//can hold multiple new tweets\n      setNewTweets(tempNewTweets) \n    }\n\n  return <div className={props.className}>\n          {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12mb-3' />}\n          <FeedList newTweets={newTweets} {...props} />\n    </div>\n}\n\nexport function TweetsComponent(props){\n  //it is main custom tag which is getting rendered into django\n  const [newTweets, setNewTweets] = useState([])\n\n  const canTweet = props.canTweet === \"false\" ? false : true\n\n  const handleNewTweet = (newTweet) =>{\n    //called when new tweet created\n    //takes data from callback from TweetCreate\n    //sends new Tweet data to TweetsList\n    let tempNewTweets = [...newTweets]\n      tempNewTweets.unshift(newTweet)//can hold multiple new tweets\n      setNewTweets(tempNewTweets) \n    }\n\n  return <div className={props.className}>\n          {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12mb-3' />}\n          <TweetsList newTweets={newTweets} {...props} />\n    </div>\n}\n\nexport function TweetDetailComponent(props){\n  const {tweetId} = props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n\n  const handleBackendLookup = (response, status) => {\n    if (status === 200){\n      setTweet(response)\n    } else {\n      alert(\"There was an error finding your tweet.\")\n    }\n  }\n\n  useEffect(() =>{\n    if (didLookup === false){\n      apiTweetDetail(tweetId, handleBackendLookup)\n      setDidLookup(true)\n    }\n  },[tweetId, didLookup, setDidLookup])\n\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}\n\n\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {FeedComponent, TweetsComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<App />, appEl);\n}\n\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl){\n  ReactDOM.render(\n    e(TweetsComponent, tweetsEl.dataset),tweetsEl);\n}\n\nconst tweetFeedEl = document.getElementById(\"tweetme-2-feed\")\nif (tweetFeedEl){\n  ReactDOM.render(\n    e(FeedComponent, tweetFeedEl.dataset),tweetFeedEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container => {\n  ReactDOM.render\n  (e(TweetDetailComponent, container.dataset),\n  container);\n})\n//inside e first argument is which component to render\n//second is what data to put       \n//second arg inside render is where to put \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}